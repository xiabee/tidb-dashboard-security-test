/* tslint:disable */
/* eslint-disable */
/**
 * Clinic Example API
 * This is a Clinic server.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * get slow log list in cluster
         * @summary get slow log list
         * @param {string} xCsrfToken get value from login.ValidationResp response
         * @param {string} oid organization id
         * @param {string} itemID package id
         * @param {string} cid cluster id
         * @param {number} [beginTime] start time
         * @param {number} [endTime] end time
         * @param {Array<string>} [db] db list
         * @param {number} [limit] limit
         * @param {string} [text] text
         * @param {string} [orderBy] orderBy
         * @param {boolean} [desc] desc
         * @param {Array<string>} [plans] plans
         * @param {string} [digest] digest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgsOidClustersCidSlowqueriesGet: async (xCsrfToken: string, oid: string, itemID: string, cid: string, beginTime?: number, endTime?: number, db?: Array<string>, limit?: number, text?: string, orderBy?: string, desc?: boolean, plans?: Array<string>, digest?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xCsrfToken' is not null or undefined
            assertParamExists('orgsOidClustersCidSlowqueriesGet', 'xCsrfToken', xCsrfToken)
            // verify required parameter 'oid' is not null or undefined
            assertParamExists('orgsOidClustersCidSlowqueriesGet', 'oid', oid)
            // verify required parameter 'itemID' is not null or undefined
            assertParamExists('orgsOidClustersCidSlowqueriesGet', 'itemID', itemID)
            // verify required parameter 'cid' is not null or undefined
            assertParamExists('orgsOidClustersCidSlowqueriesGet', 'cid', cid)
            const localVarPath = `/orgs/{oid}/clusters/{cid}/slowqueries`
                .replace(`{${"oid"}}`, encodeURIComponent(String(oid)))
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (itemID !== undefined) {
                localVarQueryParameter['itemID'] = itemID;
            }

            if (beginTime !== undefined) {
                localVarQueryParameter['begin_time'] = beginTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['end_time'] = endTime;
            }

            if (db) {
                localVarQueryParameter['db'] = db.join(COLLECTION_FORMATS.csv);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (text !== undefined) {
                localVarQueryParameter['text'] = text;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (desc !== undefined) {
                localVarQueryParameter['desc'] = desc;
            }

            if (plans) {
                localVarQueryParameter['plans'] = plans.join(COLLECTION_FORMATS.csv);
            }

            if (digest !== undefined) {
                localVarQueryParameter['digest'] = digest;
            }

            if (xCsrfToken !== undefined && xCsrfToken !== null) {
                localVarHeaderParameter['x-csrf-token'] = String(xCsrfToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get slow log detail in cluster
         * @summary get slow log detail
         * @param {string} xCsrfToken get value from login.ValidationResp response
         * @param {string} oid organization id
         * @param {string} itemID package id
         * @param {string} cid cluster id
         * @param {string} queryid log id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgsOidClustersCidSlowqueriesQueryidGet: async (xCsrfToken: string, oid: string, itemID: string, cid: string, queryid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xCsrfToken' is not null or undefined
            assertParamExists('orgsOidClustersCidSlowqueriesQueryidGet', 'xCsrfToken', xCsrfToken)
            // verify required parameter 'oid' is not null or undefined
            assertParamExists('orgsOidClustersCidSlowqueriesQueryidGet', 'oid', oid)
            // verify required parameter 'itemID' is not null or undefined
            assertParamExists('orgsOidClustersCidSlowqueriesQueryidGet', 'itemID', itemID)
            // verify required parameter 'cid' is not null or undefined
            assertParamExists('orgsOidClustersCidSlowqueriesQueryidGet', 'cid', cid)
            // verify required parameter 'queryid' is not null or undefined
            assertParamExists('orgsOidClustersCidSlowqueriesQueryidGet', 'queryid', queryid)
            const localVarPath = `/orgs/{oid}/clusters/{cid}/slowqueries/{queryid}`
                .replace(`{${"oid"}}`, encodeURIComponent(String(oid)))
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)))
                .replace(`{${"queryid"}}`, encodeURIComponent(String(queryid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (itemID !== undefined) {
                localVarQueryParameter['itemID'] = itemID;
            }

            if (xCsrfToken !== undefined && xCsrfToken !== null) {
                localVarHeaderParameter['x-csrf-token'] = String(xCsrfToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * get slow log list in cluster
         * @summary get slow log list
         * @param {string} xCsrfToken get value from login.ValidationResp response
         * @param {string} oid organization id
         * @param {string} itemID package id
         * @param {string} cid cluster id
         * @param {number} [beginTime] start time
         * @param {number} [endTime] end time
         * @param {Array<string>} [db] db list
         * @param {number} [limit] limit
         * @param {string} [text] text
         * @param {string} [orderBy] orderBy
         * @param {boolean} [desc] desc
         * @param {Array<string>} [plans] plans
         * @param {string} [digest] digest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgsOidClustersCidSlowqueriesGet(xCsrfToken: string, oid: string, itemID: string, cid: string, beginTime?: number, endTime?: number, db?: Array<string>, limit?: number, text?: string, orderBy?: string, desc?: boolean, plans?: Array<string>, digest?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgsOidClustersCidSlowqueriesGet(xCsrfToken, oid, itemID, cid, beginTime, endTime, db, limit, text, orderBy, desc, plans, digest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * get slow log detail in cluster
         * @summary get slow log detail
         * @param {string} xCsrfToken get value from login.ValidationResp response
         * @param {string} oid organization id
         * @param {string} itemID package id
         * @param {string} cid cluster id
         * @param {string} queryid log id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgsOidClustersCidSlowqueriesQueryidGet(xCsrfToken: string, oid: string, itemID: string, cid: string, queryid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgsOidClustersCidSlowqueriesQueryidGet(xCsrfToken, oid, itemID, cid, queryid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * get slow log list in cluster
         * @summary get slow log list
         * @param {string} xCsrfToken get value from login.ValidationResp response
         * @param {string} oid organization id
         * @param {string} itemID package id
         * @param {string} cid cluster id
         * @param {number} [beginTime] start time
         * @param {number} [endTime] end time
         * @param {Array<string>} [db] db list
         * @param {number} [limit] limit
         * @param {string} [text] text
         * @param {string} [orderBy] orderBy
         * @param {boolean} [desc] desc
         * @param {Array<string>} [plans] plans
         * @param {string} [digest] digest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgsOidClustersCidSlowqueriesGet(xCsrfToken: string, oid: string, itemID: string, cid: string, beginTime?: number, endTime?: number, db?: Array<string>, limit?: number, text?: string, orderBy?: string, desc?: boolean, plans?: Array<string>, digest?: string, options?: any): AxiosPromise<Array<object>> {
            return localVarFp.orgsOidClustersCidSlowqueriesGet(xCsrfToken, oid, itemID, cid, beginTime, endTime, db, limit, text, orderBy, desc, plans, digest, options).then((request) => request(axios, basePath));
        },
        /**
         * get slow log detail in cluster
         * @summary get slow log detail
         * @param {string} xCsrfToken get value from login.ValidationResp response
         * @param {string} oid organization id
         * @param {string} itemID package id
         * @param {string} cid cluster id
         * @param {string} queryid log id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgsOidClustersCidSlowqueriesQueryidGet(xCsrfToken: string, oid: string, itemID: string, cid: string, queryid: string, options?: any): AxiosPromise<object> {
            return localVarFp.orgsOidClustersCidSlowqueriesQueryidGet(xCsrfToken, oid, itemID, cid, queryid, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for orgsOidClustersCidSlowqueriesGet operation in DefaultApi.
 * @export
 * @interface DefaultApiOrgsOidClustersCidSlowqueriesGetRequest
 */
export interface DefaultApiOrgsOidClustersCidSlowqueriesGetRequest {
    /**
     * get value from login.ValidationResp response
     * @type {string}
     * @memberof DefaultApiOrgsOidClustersCidSlowqueriesGet
     */
    readonly xCsrfToken: string

    /**
     * organization id
     * @type {string}
     * @memberof DefaultApiOrgsOidClustersCidSlowqueriesGet
     */
    readonly oid: string

    /**
     * package id
     * @type {string}
     * @memberof DefaultApiOrgsOidClustersCidSlowqueriesGet
     */
    readonly itemID: string

    /**
     * cluster id
     * @type {string}
     * @memberof DefaultApiOrgsOidClustersCidSlowqueriesGet
     */
    readonly cid: string

    /**
     * start time
     * @type {number}
     * @memberof DefaultApiOrgsOidClustersCidSlowqueriesGet
     */
    readonly beginTime?: number

    /**
     * end time
     * @type {number}
     * @memberof DefaultApiOrgsOidClustersCidSlowqueriesGet
     */
    readonly endTime?: number

    /**
     * db list
     * @type {Array<string>}
     * @memberof DefaultApiOrgsOidClustersCidSlowqueriesGet
     */
    readonly db?: Array<string>

    /**
     * limit
     * @type {number}
     * @memberof DefaultApiOrgsOidClustersCidSlowqueriesGet
     */
    readonly limit?: number

    /**
     * text
     * @type {string}
     * @memberof DefaultApiOrgsOidClustersCidSlowqueriesGet
     */
    readonly text?: string

    /**
     * orderBy
     * @type {string}
     * @memberof DefaultApiOrgsOidClustersCidSlowqueriesGet
     */
    readonly orderBy?: string

    /**
     * desc
     * @type {boolean}
     * @memberof DefaultApiOrgsOidClustersCidSlowqueriesGet
     */
    readonly desc?: boolean

    /**
     * plans
     * @type {Array<string>}
     * @memberof DefaultApiOrgsOidClustersCidSlowqueriesGet
     */
    readonly plans?: Array<string>

    /**
     * digest
     * @type {string}
     * @memberof DefaultApiOrgsOidClustersCidSlowqueriesGet
     */
    readonly digest?: string
}

/**
 * Request parameters for orgsOidClustersCidSlowqueriesQueryidGet operation in DefaultApi.
 * @export
 * @interface DefaultApiOrgsOidClustersCidSlowqueriesQueryidGetRequest
 */
export interface DefaultApiOrgsOidClustersCidSlowqueriesQueryidGetRequest {
    /**
     * get value from login.ValidationResp response
     * @type {string}
     * @memberof DefaultApiOrgsOidClustersCidSlowqueriesQueryidGet
     */
    readonly xCsrfToken: string

    /**
     * organization id
     * @type {string}
     * @memberof DefaultApiOrgsOidClustersCidSlowqueriesQueryidGet
     */
    readonly oid: string

    /**
     * package id
     * @type {string}
     * @memberof DefaultApiOrgsOidClustersCidSlowqueriesQueryidGet
     */
    readonly itemID: string

    /**
     * cluster id
     * @type {string}
     * @memberof DefaultApiOrgsOidClustersCidSlowqueriesQueryidGet
     */
    readonly cid: string

    /**
     * log id
     * @type {string}
     * @memberof DefaultApiOrgsOidClustersCidSlowqueriesQueryidGet
     */
    readonly queryid: string
}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * get slow log list in cluster
     * @summary get slow log list
     * @param {DefaultApiOrgsOidClustersCidSlowqueriesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public orgsOidClustersCidSlowqueriesGet(requestParameters: DefaultApiOrgsOidClustersCidSlowqueriesGetRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).orgsOidClustersCidSlowqueriesGet(requestParameters.xCsrfToken, requestParameters.oid, requestParameters.itemID, requestParameters.cid, requestParameters.beginTime, requestParameters.endTime, requestParameters.db, requestParameters.limit, requestParameters.text, requestParameters.orderBy, requestParameters.desc, requestParameters.plans, requestParameters.digest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get slow log detail in cluster
     * @summary get slow log detail
     * @param {DefaultApiOrgsOidClustersCidSlowqueriesQueryidGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public orgsOidClustersCidSlowqueriesQueryidGet(requestParameters: DefaultApiOrgsOidClustersCidSlowqueriesQueryidGetRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).orgsOidClustersCidSlowqueriesQueryidGet(requestParameters.xCsrfToken, requestParameters.oid, requestParameters.itemID, requestParameters.cid, requestParameters.queryid, options).then((request) => request(this.axios, this.basePath));
    }
}


